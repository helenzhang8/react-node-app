{"ast":null,"code":"import _objectSpread from\"/Users/helenzhang/Desktop/Summer 2021/Basil/react-node-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/helenzhang/Desktop/Summer 2021/Basil/react-node-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as React from'react';import ReactMapGL,{Marker}from'react-map-gl';import{useState}from\"react\";import{Button,Fade}from\"@material-ui/core\";// import PulsingDot from \"../assets/PulsingDot/PulsingDot\";\n// import {enums} from \"../utils/enums\";\n// import 'mapbox-gl/dist/mapbox-gl.css';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var token='pk.eyJ1IjoiYmxibGJsNDQiLCJhIjoiY2twcGY2OTN0MGZqazJ1cWpoM2h5eDl5NSJ9.5uYgki649OhuoI6Bw7R3ag';export default function Map(_ref){var allLocations=_ref.allLocations,setMarkerToDisplay=_ref.setMarkerToDisplay;// console.log(\"allLocations\", allLocations)\nvar _React$useState=React.useState({longitude:allLocations.length>0?parseFloat(allLocations[0].latlon.split(\", \")[1]):-73.9361965,latitude:allLocations.length>0?parseFloat(allLocations[0].latlon.split(\", \")[0]):40.6780116,zoom:20}),_React$useState2=_slicedToArray(_React$useState,2),viewport=_React$useState2[0],setViewport=_React$useState2[1];var _useState=useState({longitude:-73.9361965,latitude:40.6780116}),_useState2=_slicedToArray(_useState,2),userLocation=_useState2[0],setUserLocation=_useState2[1];function locateUser(){navigator.geolocation.getCurrentPosition(function(position){console.log(position);setViewport({longitude:position.coords.longitude,latitude:position.coords.latitude,zoom:20});setUserLocation({longitude:position.coords.longitude,latitude:position.coords.latitude});});}function deduceIconType(locationObject){switch(locationObject){case true:return/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83D\\uDE98\"});case false:return/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83C\\uDD7F\\uFE0F\"});}}return/*#__PURE__*/_jsx(Fade,{in:true,timeout:1000,children:/*#__PURE__*/_jsxs(\"div\",{style:{position:\"fixed\",top:0,left:0,width:'100vw',height:'100vh',zIndex:1},children:[/*#__PURE__*/_jsxs(ReactMapGL,_objectSpread(_objectSpread({mapboxApiAccessToken:token},viewport),{},{width:\"100%\",height:'100vh',onViewportChange:setViewport,mapStyle:'mapbox://styles/blblbl44/ckpu5h6mz30ti17s9c9o19y8s',children:[allLocations.map(function(location){return/*#__PURE__*/_jsx(CustomMarker,{latitude:parseFloat(location.latlon.split(\", \")[0]),longitude:parseFloat(location.latlon.split(\", \")[1]),viewport:viewport,name:location._id,setMarkerToDisplay:setMarkerToDisplay,icon:deduceIconType(location.status),locationObject:location},location._id);}),/*#__PURE__*/_jsx(CustomMarker,{latitude:userLocation.latitude,longitude:userLocation.longitude,name:\"You Are Here\",viewport:viewport// icon={<PulsingDot/>}\n,setMarkerToDisplay:null})]})),/*#__PURE__*/_jsx(Button,{style:{position:\"fixed\",bottom:30,right:20,backgroundColor:\"green\",color:\"white\"},variant:\"contained\",\"aria-label\":\"add\",onClick:function onClick(){return locateUser();},children:\"Locate Me\"})]})});}function CustomMarker(props){var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),showPopup=_React$useState4[0],togglePopup=_React$useState4[1];var longitude=props.longitude,latitude=props.latitude,viewport=props.viewport,name=props.name,setMarkerToDisplay=props.setMarkerToDisplay,icon=props.icon,locationObject=props.locationObject;return/*#__PURE__*/_jsx(\"div\",{style:{transition:\"ease-in\"},children:/*#__PURE__*/_jsx(Marker,{latitude:latitude,longitude:longitude,offsetLeft:-20,offsetTop:-10,children:/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){togglePopup(!showPopup);setMarkerToDisplay(locationObject);},children:icon})})});}","map":{"version":3,"sources":["/Users/helenzhang/Desktop/Summer 2021/Basil/react-node-app/client/src/MapViewScratch.js"],"names":["React","ReactMapGL","Marker","useState","Button","Fade","token","Map","allLocations","setMarkerToDisplay","longitude","length","parseFloat","latlon","split","latitude","zoom","viewport","setViewport","userLocation","setUserLocation","locateUser","navigator","geolocation","getCurrentPosition","position","console","log","coords","deduceIconType","locationObject","top","left","width","height","zIndex","map","location","_id","status","bottom","right","backgroundColor","color","CustomMarker","props","showPopup","togglePopup","name","icon","transition"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport ReactMapGL, {Marker} from 'react-map-gl';\r\nimport {useState} from \"react\";\r\nimport {Button, Fade} from \"@material-ui/core\";\r\n// import PulsingDot from \"../assets/PulsingDot/PulsingDot\";\r\n// import {enums} from \"../utils/enums\";\r\n// import 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst token = 'pk.eyJ1IjoiYmxibGJsNDQiLCJhIjoiY2twcGY2OTN0MGZqazJ1cWpoM2h5eDl5NSJ9.5uYgki649OhuoI6Bw7R3ag'\r\n\r\n\r\nexport default function Map({allLocations, setMarkerToDisplay}) {\r\n    // console.log(\"allLocations\", allLocations)\r\n    const [viewport, setViewport] = React.useState({\r\n        longitude: allLocations.length > 0 ? parseFloat(allLocations[0].latlon.split(\", \")[1]) : -73.9361965,\r\n        latitude: allLocations.length > 0 ? parseFloat(allLocations[0].latlon.split(\", \")[0]) : 40.6780116,\r\n        zoom: 20\r\n    });\r\n\r\n    const [userLocation, setUserLocation] = useState({\r\n        longitude: -73.9361965,\r\n        latitude: 40.6780116,\r\n    })\r\n\r\n    function locateUser() {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            console.log(position)\r\n            setViewport({longitude: position.coords.longitude, latitude: position.coords.latitude, zoom: 20})\r\n            setUserLocation({longitude: position.coords.longitude, latitude: position.coords.latitude})\r\n        });\r\n    }\r\n\r\n    function deduceIconType(locationObject) {\r\n        switch (locationObject) {\r\n            case true:\r\n                return (\r\n                    <p>üöò</p>\r\n                )\r\n            case false:\r\n                return (\r\n                    <p>üÖøÔ∏è</p>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fade in timeout={1000}>\r\n            <div style={{position: \"fixed\", top: 0, left: 0, width: '100vw', height: '100vh', zIndex: 1}}>\r\n\r\n                <ReactMapGL mapboxApiAccessToken={token} {...viewport} width=\"100%\" height={'100vh'}\r\n                            onViewportChange={setViewport}\r\n                            mapStyle={'mapbox://styles/blblbl44/ckpu5h6mz30ti17s9c9o19y8s'}\r\n                >\r\n                    {allLocations.map(location => {\r\n                        return (\r\n                            <CustomMarker key={location._id} latitude={parseFloat(location.latlon.split(\", \")[0])}\r\n                                          longitude={parseFloat(location.latlon.split(\", \")[1])} viewport={viewport}\r\n                                          name={location._id} setMarkerToDisplay={setMarkerToDisplay}\r\n                                          icon={deduceIconType(location.status)}\r\n                                          locationObject={location}\r\n                            />)\r\n                    })}\r\n\r\n                    <CustomMarker\r\n                        latitude={userLocation.latitude}\r\n                        longitude={userLocation.longitude}\r\n                        name={\"You Are Here\"}\r\n                        viewport={viewport}\r\n                        // icon={<PulsingDot/>}\r\n                        setMarkerToDisplay={null}\r\n                    />\r\n\r\n                </ReactMapGL>\r\n\r\n                <Button style={{\r\n                    position: \"fixed\",\r\n                    bottom: 30,\r\n                    right: 20,\r\n                    backgroundColor: \"green\",\r\n                    color: \"white\",\r\n                }}\r\n                        variant={\"contained\"}\r\n                        aria-label=\"add\"\r\n                        onClick={() => locateUser()}>\r\n                    Locate Me\r\n                </Button>\r\n            </div>\r\n        </Fade>\r\n    );\r\n}\r\n\r\nfunction CustomMarker(props) {\r\n    const [showPopup, togglePopup] = React.useState(false);\r\n\r\n    const {longitude, latitude, viewport, name, setMarkerToDisplay, icon, locationObject} = props;\r\n\r\n    return (\r\n        <div style={{transition: \"ease-in\"}}>\r\n            <Marker latitude={latitude} longitude={longitude} offsetLeft={-20} offsetTop={-10}>\r\n                <div onClick={() => {\r\n                    togglePopup(!showPopup)\r\n                    setMarkerToDisplay(locationObject)\r\n                }}>{icon}</div>\r\n            </Marker>\r\n            {/*// uncomment if we want to have a pop up when the marker is clicked*/}\r\n            {/*{showPopup && <Popup*/}\r\n            {/*    latitude={latitude} longitude={longitude}*/}\r\n            {/*    closeButton={true}*/}\r\n            {/*    closeOnClick={false}*/}\r\n            {/*    onClose={() => togglePopup(false)}*/}\r\n            {/*    anchor=\"top\">*/}\r\n            {/*    <Grid container alignContent={\"center\"} alignItems={\"center\"}>*/}\r\n            {/*        <Grid item xs={12}>*/}\r\n            {/*            <Typography><strong>{name}</strong></Typography>*/}\r\n            {/*        </Grid>*/}\r\n\r\n            {/*        <Grid item xs={12}>*/}\r\n            {/*            <Typography>category</Typography>*/}\r\n            {/*        </Grid>*/}\r\n\r\n            {/*    </Grid>*/}\r\n            {/*</Popup>}*/}\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}