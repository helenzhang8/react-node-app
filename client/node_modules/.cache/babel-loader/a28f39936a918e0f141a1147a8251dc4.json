{"ast":null,"code":"'use strict';\n\nconst MongoError = require('../core').MongoError;\n\nconst FindAndModifyOperation = require('./find_and_modify');\n\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if ('returnDocument' in options && 'returnOriginal' in options) {\n      throw new MongoError('findOneAndUpdate option returnOriginal is deprecated in favor of returnDocument and cannot be combined');\n    } // Final options\n\n\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = options.returnDocument === 'after' || options.returnOriginal === false;\n    finalOptions.upsert = options.upsert === true;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new TypeError('Update parameter must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, update, finalOptions);\n  }\n\n}\n\nmodule.exports = FindOneAndUpdateOperation;","map":{"version":3,"sources":["/Users/helenzhang/Desktop/Summer 2021/Basil/react-node-app/client/node_modules/mongodb/lib/operations/find_one_and_update.js"],"names":["MongoError","require","FindAndModifyOperation","hasAtomicOperators","FindOneAndUpdateOperation","constructor","collection","filter","update","options","finalOptions","Object","assign","fields","projection","new","returnDocument","returnOriginal","upsert","TypeError","sort","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,UAAtC;;AACA,MAAME,sBAAsB,GAAGD,OAAO,CAAC,mBAAD,CAAtC;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,kBAA/C;;AAEA,MAAMC,yBAAN,SAAwCF,sBAAxC,CAA+D;AAC7DG,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AAC/C,QAAI,oBAAoBA,OAApB,IAA+B,oBAAoBA,OAAvD,EAAgE;AAC9D,YAAM,IAAIT,UAAJ,CACJ,wGADI,CAAN;AAGD,KAL8C,CAM/C;;;AACA,UAAMU,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAArB;AACAC,IAAAA,YAAY,CAACG,MAAb,GAAsBJ,OAAO,CAACK,UAA9B;AACAJ,IAAAA,YAAY,CAACF,MAAb,GAAsB,IAAtB;AACAE,IAAAA,YAAY,CAACK,GAAb,GAAmBN,OAAO,CAACO,cAAR,KAA2B,OAA3B,IAAsCP,OAAO,CAACQ,cAAR,KAA2B,KAApF;AACAP,IAAAA,YAAY,CAACQ,MAAb,GAAsBT,OAAO,CAACS,MAAR,KAAmB,IAAzC;;AAEA,QAAIX,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,QAAxC,EAAkD;AAChD,YAAM,IAAIY,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,QAAIX,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,QAAxC,EAAkD;AAChD,YAAM,IAAIW,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,QAAI,CAAChB,kBAAkB,CAACK,MAAD,CAAvB,EAAiC;AAC/B,YAAM,IAAIW,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAED,UAAMb,UAAN,EAAkBC,MAAlB,EAA0BG,YAAY,CAACU,IAAvC,EAA6CZ,MAA7C,EAAqDE,YAArD;AACD;;AA3B4D;;AA8B/DW,MAAM,CAACC,OAAP,GAAiBlB,yBAAjB","sourcesContent":["'use strict';\n\nconst MongoError = require('../core').MongoError;\nconst FindAndModifyOperation = require('./find_and_modify');\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if ('returnDocument' in options && 'returnOriginal' in options) {\n      throw new MongoError(\n        'findOneAndUpdate option returnOriginal is deprecated in favor of returnDocument and cannot be combined'\n      );\n    }\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = options.returnDocument === 'after' || options.returnOriginal === false;\n    finalOptions.upsert = options.upsert === true;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new TypeError('Update parameter must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, update, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndUpdateOperation;\n"]},"metadata":{},"sourceType":"script"}