{"ast":null,"code":"'use strict';\n\nconst MongoError = require('../core').MongoError;\n\nconst FindAndModifyOperation = require('./find_and_modify');\n\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if ('returnDocument' in options && 'returnOriginal' in options) {\n      throw new MongoError('findOneAndReplace option returnOriginal is deprecated in favor of returnDocument and cannot be combined');\n    } // Final options\n\n\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = options.returnDocument === 'after' || options.returnOriginal === false;\n    finalOptions.upsert = options.upsert === true;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new TypeError('Replacement parameter must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, replacement, finalOptions);\n  }\n\n}\n\nmodule.exports = FindOneAndReplaceOperation;","map":{"version":3,"sources":["/Users/helenzhang/Desktop/Summer 2021/Basil/react-node-app/client/node_modules/mongodb/lib/operations/find_one_and_replace.js"],"names":["MongoError","require","FindAndModifyOperation","hasAtomicOperators","FindOneAndReplaceOperation","constructor","collection","filter","replacement","options","finalOptions","Object","assign","fields","projection","update","new","returnDocument","returnOriginal","upsert","TypeError","sort","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,UAAtC;;AACA,MAAME,sBAAsB,GAAGD,OAAO,CAAC,mBAAD,CAAtC;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,kBAA/C;;AAEA,MAAMC,0BAAN,SAAyCF,sBAAzC,CAAgE;AAC9DG,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,WAArB,EAAkCC,OAAlC,EAA2C;AACpD,QAAI,oBAAoBA,OAApB,IAA+B,oBAAoBA,OAAvD,EAAgE;AAC9D,YAAM,IAAIT,UAAJ,CACJ,yGADI,CAAN;AAGD,KALmD,CAMpD;;;AACA,UAAMU,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAArB;AACAC,IAAAA,YAAY,CAACG,MAAb,GAAsBJ,OAAO,CAACK,UAA9B;AACAJ,IAAAA,YAAY,CAACK,MAAb,GAAsB,IAAtB;AACAL,IAAAA,YAAY,CAACM,GAAb,GAAmBP,OAAO,CAACQ,cAAR,KAA2B,OAA3B,IAAsCR,OAAO,CAACS,cAAR,KAA2B,KAApF;AACAR,IAAAA,YAAY,CAACS,MAAb,GAAsBV,OAAO,CAACU,MAAR,KAAmB,IAAzC;;AAEA,QAAIZ,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,QAAxC,EAAkD;AAChD,YAAM,IAAIa,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,QAAIZ,WAAW,IAAI,IAAf,IAAuB,OAAOA,WAAP,KAAuB,QAAlD,EAA4D;AAC1D,YAAM,IAAIY,SAAJ,CAAc,yCAAd,CAAN;AACD;;AAED,QAAIjB,kBAAkB,CAACK,WAAD,CAAtB,EAAqC;AACnC,YAAM,IAAIY,SAAJ,CAAc,wDAAd,CAAN;AACD;;AAED,UAAMd,UAAN,EAAkBC,MAAlB,EAA0BG,YAAY,CAACW,IAAvC,EAA6Cb,WAA7C,EAA0DE,YAA1D;AACD;;AA3B6D;;AA8BhEY,MAAM,CAACC,OAAP,GAAiBnB,0BAAjB","sourcesContent":["'use strict';\n\nconst MongoError = require('../core').MongoError;\nconst FindAndModifyOperation = require('./find_and_modify');\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if ('returnDocument' in options && 'returnOriginal' in options) {\n      throw new MongoError(\n        'findOneAndReplace option returnOriginal is deprecated in favor of returnDocument and cannot be combined'\n      );\n    }\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = options.returnDocument === 'after' || options.returnOriginal === false;\n    finalOptions.upsert = options.upsert === true;\n\n    if (filter == null || typeof filter !== 'object') {\n      throw new TypeError('Filter parameter must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new TypeError('Replacement parameter must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, finalOptions.sort, replacement, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndReplaceOperation;\n"]},"metadata":{},"sourceType":"script"}