{"version":3,"sources":["logo.svg","MapViewScratch.js","App.js","reportWebVitals.js","index.js"],"names":["Map","allLocations","setMarkerToDisplay","React","longitude","length","parseFloat","latlon","split","latitude","zoom","viewport","setViewport","useState","userLocation","setUserLocation","deduceIconType","locationObject","Fade","in","timeout","style","position","top","left","width","height","zIndex","mapboxApiAccessToken","onViewportChange","mapStyle","map","location","CustomMarker","name","_id","icon","status","Button","bottom","right","backgroundColor","color","variant","aria-label","onClick","navigator","geolocation","getCurrentPosition","console","log","coords","props","showPopup","togglePopup","transition","offsetLeft","offsetTop","App","data","setData","useEffect","setTimeout","fetch","then","res1","json","res2","message","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccdbe530.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as React from 'react';\r\nimport ReactMapGL, {Marker} from 'react-map-gl';\r\nimport {useState} from \"react\";\r\nimport {Button, Fade} from \"@material-ui/core\";\r\n// import PulsingDot from \"../assets/PulsingDot/PulsingDot\";\r\n// import {enums} from \"../utils/enums\";\r\n// import 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst token = 'pk.eyJ1IjoiYmxibGJsNDQiLCJhIjoiY2twcGY2OTN0MGZqazJ1cWpoM2h5eDl5NSJ9.5uYgki649OhuoI6Bw7R3ag'\r\n\r\n\r\nexport default function Map({allLocations, setMarkerToDisplay}) {\r\n    // console.log(\"allLocations\", allLocations)\r\n    const [viewport, setViewport] = React.useState({\r\n        longitude: allLocations.length > 0 ? parseFloat(allLocations[0].latlon.split(\", \")[1]) : -73.9361965,\r\n        latitude: allLocations.length > 0 ? parseFloat(allLocations[0].latlon.split(\", \")[0]) : 40.6780116,\r\n        zoom: 20\r\n    });\r\n\r\n    const [userLocation, setUserLocation] = useState({\r\n        longitude: -73.9361965,\r\n        latitude: 40.6780116,\r\n    })\r\n\r\n    function locateUser() {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            console.log(position)\r\n            setViewport({longitude: position.coords.longitude, latitude: position.coords.latitude, zoom: 20})\r\n            setUserLocation({longitude: position.coords.longitude, latitude: position.coords.latitude})\r\n        });\r\n    }\r\n\r\n    function deduceIconType(locationObject) {\r\n        switch (locationObject) {\r\n            case true:\r\n                return (\r\n                    <p>üöò</p>\r\n                )\r\n            case false:\r\n                return (\r\n                    <p>üÖøÔ∏è</p>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fade in timeout={1000}>\r\n            <div style={{position: \"fixed\", top: 0, left: 0, width: '100vw', height: '100vh', zIndex: 1}}>\r\n\r\n                <ReactMapGL mapboxApiAccessToken={token} {...viewport} width=\"100%\" height={'100vh'}\r\n                            onViewportChange={setViewport}\r\n                            mapStyle={'mapbox://styles/blblbl44/ckpu5h6mz30ti17s9c9o19y8s'}\r\n                >\r\n                    {allLocations.map(location => {\r\n                        return (\r\n                            <CustomMarker key={location._id} latitude={parseFloat(location.latlon.split(\", \")[0])}\r\n                                          longitude={parseFloat(location.latlon.split(\", \")[1])} viewport={viewport}\r\n                                          name={location._id} setMarkerToDisplay={setMarkerToDisplay}\r\n                                          icon={deduceIconType(location.status)}\r\n                                          locationObject={location}\r\n                            />)\r\n                    })}\r\n\r\n                    <CustomMarker\r\n                        latitude={userLocation.latitude}\r\n                        longitude={userLocation.longitude}\r\n                        name={\"You Are Here\"}\r\n                        viewport={viewport}\r\n                        // icon={<PulsingDot/>}\r\n                        setMarkerToDisplay={null}\r\n                    />\r\n\r\n                </ReactMapGL>\r\n\r\n                <Button style={{\r\n                    position: \"fixed\",\r\n                    bottom: 30,\r\n                    right: 20,\r\n                    backgroundColor: \"green\",\r\n                    color: \"white\",\r\n                }}\r\n                        variant={\"contained\"}\r\n                        aria-label=\"add\"\r\n                        onClick={() => locateUser()}>\r\n                    Locate Me\r\n                </Button>\r\n            </div>\r\n        </Fade>\r\n    );\r\n}\r\n\r\nfunction CustomMarker(props) {\r\n    const [showPopup, togglePopup] = React.useState(false);\r\n\r\n    const {longitude, latitude, viewport, name, setMarkerToDisplay, icon, locationObject} = props;\r\n\r\n    return (\r\n        <div style={{transition: \"ease-in\"}}>\r\n            <Marker latitude={latitude} longitude={longitude} offsetLeft={-20} offsetTop={-10}>\r\n                <div onClick={() => {\r\n                    togglePopup(!showPopup)\r\n                    setMarkerToDisplay(locationObject)\r\n                }}>{icon}</div>\r\n            </Marker>\r\n            {/*// uncomment if we want to have a pop up when the marker is clicked*/}\r\n            {/*{showPopup && <Popup*/}\r\n            {/*    latitude={latitude} longitude={longitude}*/}\r\n            {/*    closeButton={true}*/}\r\n            {/*    closeOnClick={false}*/}\r\n            {/*    onClose={() => togglePopup(false)}*/}\r\n            {/*    anchor=\"top\">*/}\r\n            {/*    <Grid container alignContent={\"center\"} alignItems={\"center\"}>*/}\r\n            {/*        <Grid item xs={12}>*/}\r\n            {/*            <Typography><strong>{name}</strong></Typography>*/}\r\n            {/*        </Grid>*/}\r\n\r\n            {/*        <Grid item xs={12}>*/}\r\n            {/*            <Typography>category</Typography>*/}\r\n            {/*        </Grid>*/}\r\n\r\n            {/*    </Grid>*/}\r\n            {/*</Popup>}*/}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Map from './MapViewScratch.js';\n\nfunction App() {\n    const [data, setData] = React.useState([]);\n\n    React.useEffect(() => {\n        setTimeout(()=>{\n            fetch(\"/api\")\n                .then((res1) => res1.json())\n                .then((res2) => {\n                    setData(res2.message)});},100)\n    }, []);\n\n    return (\n        <div className=\"App\">\n            {/*<div>*/}\n            {/*    {data.map((d) => <li key={d._id}>{d._id},{d.latlon},{d.status.toString()}</li>)}*/}\n            {/*</div>*/}\n            <Map allLocations={data} setMarkerToDisplay={null}/>\n        </div>\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}